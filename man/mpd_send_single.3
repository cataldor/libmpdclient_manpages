.TH MPD_SEND_SINGLE 3 2019
.SH NAME
mpd_send_single, mpd_run_single, mpd_send_consume, mpd_run_consume, 
mpd_send_crossfade, mpd_run_crossfade \- manipulate MPD's playlist
.SH SYNOPSIS
.B #include <mpd/client.h>
.PP
.BI "bool mpd_send_single_state(const struct mpd_connection *" connection ","
.BI "enum mpd_single_state " state );
.PP
.BI "bool mpd_send_single(struct mpd_connection *" connection );
.PP
.BI "bool mpd_run_single_state(struct mpd_connection *" connection ","
.BI "enum mpd_single_state " state );
.PP
.BI "bool mpd_run_single(struct mpd_connection *" connection );
.PP
.BI "bool mpd_send_consume(struct mpd_connection *" connection );
.PP
.BI "bool mpd_run_consume(struct mpd_connection *" connection );
.PP
.BI "bool mpd_send_crossfade(struct mpd_connection *" connection ","
.BI "unsigned " seconds );
.PP
.BI "bool mpd_run_crossfade(struct mpd_connection *" connection ","
.BI "unsigned " seconds );
.SH DESCRIPTION
The
.BR mpd_send_single_state ()
function sets single mode to on
.RI ( MPD_SINGLE_ON ),
off
.RI ( MPD_SINGLE_OFF ),
or oneshot
.RI ( MPD_SINGLE_ONESHOT ).
If
.I state
is set to on/oneshot, MPD enables single mode: playback is
stopped after current song, or song is repeated if the repeat mode is enabled.
Besides, if there is another song in the current playlist, and single mode is
set to oneshot, MPD transition to
.I MPD_SINGLE_OFF
and the
.I mpd_single_state
object is
.I not
updated accordingly. In this case, you need to call
.BR mpd_send_status (3)
again. If
.I state
is set to off, MPD disables single mode: if random mode
is enabled, the playlist order is shuffled after it is played completely. The
function also receives a
.I connection
to the MPD server.
.PP
The
.BR mpd_send_single ()
function sets single mode on/off for the playlist. If
.I mode
is true, MPD enables single mode: playback is stopped after current song, or
song is repeated if the repeat mode is enabled. If
.I mode
is false, MPD disables single mode: if random mode is enabled, the playlist
order is shuffled after it is played completely. The function also receives a
.I connection
to the MPD server.
.IR "This function is deprecated, you should avoid it" .
.PP
The
.BR mpd_run_single_state ()
function is a shortcut for
.BR mpd_send_single_state ()
and
.BR mpd_response_finish (3).
.PP
The
.BR mpd_run_single ()
function is a shortcut for
.BR mpd_send_single ()
and
.BR mpd_response_finish (3).
.IR "This function is deprecated, you should avoid it" .
.PP
The
.BR mpd_send_consume ()
function sets consume mode on/off for the playlist. If
.I mode
is true, MPD enables consume mode: each song played is removed from the
playlist. If
.I mode
is false, MPD disables consume mode. The function also receives a
.I connection
to the MPD server.
.PP
The
.BR mpd_run_consume ()
function is a shortcut for
.BR mpd_send_consume ()
and
.BR mpd_response_finish (3).
.PP
The
.BR mpd_send_crossfade ()
function sets crossfading of
.I seconds
between songs on the playlist. Crossfading only happens when the songs audio
format are the same. The function also receives a
.I connection
to the MPD server.
.PP
The
.BR mpd_run_crossfade ()
function is a shortcut for
.BR mpd_send_crossfade ()
and
.BR mpd_response_finish (3).
.SS The mpd_single_state enum
The
.IR mpd_single_state
enum is defined as follows:
.PP
.in +4n
.EX
/**
 * MPD's single state.
 *
 * @since libmpdclient 2.18, MPD 0.21.
 */
enum mpd_single_state {
	/** disabled */
	MPD_SINGLE_OFF = 0,

	/** enabled */
	MPD_SINGLE_ON,

	/**
	 * enables single state (#MPD_SINGLE_ONESHOT) for a single song, then
	 * MPD disables single state (#MPD_SINGLE_OFF) if the current song
	 * has played and there is another song in the current playlist
	 *
	 * @since MPD 0.21
	 **/
	MPD_SINGLE_ONESHOT,

	/** Unknown state */
	MPD_SINGLE_UNKNOWN,
};
.EE
.in
.SH RETURN VALUE
.BR mpd_send_single_state (),
.BR mpd_send_single (),
.BR mpd_run_single_state (),
.BR mpd_run_single (),
.BR mpd_send_consume (),
.BR mpd_run_consume (),
.BR mpd_send_crossfade (),
.BR mpd_run_crossfade ()
return true on success, false on error.
.SH ERRORS
The user should use one of the error functions of libmpdclient for
error-checking.
.SH HISTORY
The
.BR mpd_send_single (),
.BR mpd_run_single (),
.BR mpd_send_consume (),
.BR mpd_run_single ()
functions use commands added to MPD 0.15.
.PP
The
.BR mpd_status_send_single_state ()
and
.BR mpd_status_run_single_state ()
functions were added to libmpdclient 2.18 (MPD 0.21).
.SH SEE ALSO
.BR mpd_response_finish (3),
.BR mpd_send_current_song (3),
.BR mpd_run_current_song (3),
.BR mpd_send_play (3),
.BR mpd_run_play (3),
.BR mpd_send_seek_current (3),
.BR mpd_run_seek_current (3),
.BR mpd_send_clearerror (3),
.BR mpd_run_clearerror (3),
.BR mpd_send_seek_pos (3),
.BR mpd_run_seek_pos (3),
.BR mpd_send_seek_id (3),
.BR mpd_run_seek_id (3),
.BR mpd_send_seek_id_float (3),
.BR mpd_run_seek_id_float (3),
.BR mpd_send_play_pos (3),
.BR mpd_run_play_pos (3),
.BR mpd_send_play_id (3),
.BR mpd_run_play_id (3),
.BR mpd_send_stop (3),
.BR mpd_run_stop (3),
.BR mpd_send_pause (3),
.BR mpd_run_pause (3),
.BR mpd_send_toggle_pause (3),
.BR mpd_run_toggle_pause (3),
.BR mpd_send_next (3),
.BR mpd_run_next (3),
.BR mpd_send_previous (3),
.BR mpd_run_previous (3),
.BR mpd_send_repeat (3),
.BR mpd_run_repeat (3),
.BR mpd_send_random (3),
.BR mpd_run_random (3),
.BR mpd_send_mixramdb (3),
.BR mpd_run_mixramdb (3),
.BR mpd_send_mixrampdelay (3),
.BR mpd_run_mixrampdelay (3),
.BR mpd_connection_get_error (3),
.BR mpd_connection_get_error_message (3),
.BR mpd_connection_get_server_error (3),
.BR mpd_connection_get_system_error (3)
