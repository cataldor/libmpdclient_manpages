.TH MPD_SEND_STICKER_SET 3 2019
.SH NAME
mpd_send_sticker_set, mpd_run_sticker_set, mpd_send_sticker_delete,
mpd_run_sticker_delete, mpd_send_sticker_get, mpd_run_sticket_get,
mpd_send_sticket_list \- manipulate sticker information on MPD songs
.SH SYNOPSIS
.B #include <mpd/client.h>
.PP
.BI "bool mpd_send_sticker_set(struct mpd_connection *" connection ","
.BI "const char *" type ", const char *" uri ", const char *" name ","
.BI "const char *" value );
.PP
.BI "bool mpd_run_sticker_set(struct mpd_connection *" connection ","
.BI "const char *" type ", const char *" uri ", const char *" name ","
.BI "const char *" value );
.PP
.BI "bool mpd_send_sticker_delete(struct mpd_connection *" connection ","
.BI "const char *" type ", const char *" uri ", const char *" name );
.PP
.BI "bool mpd_run_sticker_delete(struct mpd_connection *" connection ","
.BI "const char *" type ", const char *" uri ", const char *" name );
.PP
.BI "bool mpd_send_sticker_get(struct mpd_connection *" connection ","
.BI "const char *" type ", const char *" uri ", const char *" name );
.PP
.BI "bool mpd_send_sticker_list(struct mpd_connection *" connection ","
.BI "const char *" type ", const char *" uri );
.SH DESCRIPTION
Stickers are pieces of information attached to existing MPD objects (e.g. song
files, directories, albums; but currently, they are only implemented for song).
Clients can create arbitrary name/value pairs. MPD itself does not assume any
special meaning in them.  
.PP
The goal is to allow clients to share additional (possibly dynamic) information
about songs, which is neither stored on the client (not available to other
clients), nor stored in the song files (MPD has no write access).  
.PP
Client developers should create a standard for common sticker names, to
ensure interoperability.  
.PP
Objects which may have stickers are addressed by their object type
(\(lqsong\(rq for song objects) and their uri (the path within the database for
songs).  
.PP
The
.BR mpd_send_sticker_set ()
function adds or replaces a sticker of the object
.I type
with the path
.I uri
containing the
.I name
with
.IR value .
Currently,
.I type
must be "song". The function also receives a
.I connection
to the MPD server.
.PP
The
.BR mpd_run_sticket_set ()
function is a shortcut for
.BR mpd_send_sticker_set ()
and
.BR mpd_response_finish (3).
.PP
The
.BR mpd_send_sticker_delete ()
function deletes a sticker of the object
.I type
with the path
.I uri
containing the
.IR name .
Currently,
.I type
must be "song". The function also receives a
.I connection
to the MPD server.
.PP
The
.BR mpd_run_sticker_delete ()
function is a shortcut for
.BR mpd_send_sticker_delete ()
and
.BR mpd_response_finish (3).
.PP
The
.BR mpd_send_sticker_get ()
function queries a sticker of the object
.I type
with the path
.I uri
containing the
.IR name .
Currently,
.I type
must be "song". The function also receives a
.I connection
to the MPD server.
.PP
The
.BR mpd_send_sticker_list ()
function queries a list of all sticker of the object
.I type
with the path
.IR uri .
Currently,
.I type
must be "song". The function also receives a
.I connection
to the MPD server.
.SH RETURN VALUE
All functions return true on success, false on error.
.SH ERRORS
The user should use one of the error functions of libmpdclient for
error-checking.
.SH HISTORY
All functions were added to libmpdclient 2.1.
.SH SEE ALSO
.BR mpd_send_sticker_find (3),
.BR mpd_parse_sticker (3),
.BR mpd_recv_sticker (3),
.BR mpd_return_sticker (3),
.BR mpd_connection_get_error (3),
.BR mpd_connection_get_error_message (3),
.BR mpd_connection_get_server_error (3),
.BR mpd_connection_get_system_error (3)
